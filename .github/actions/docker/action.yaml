name: Docker Image Build
description: Builds Cobalt build docker images.
inputs:
  docker_service:
    description: "Docker compose service."
    required: true
  docker_image:
    description: "Docker image name."
    required: true

runs:
  using: "composite"
  steps:
    - name: Configure Git Rename Limit
      run: git config diff.renameLimit 999999
      shell: bash

    - name: Get changes to Docker files
      id: changed-files
      uses: tj-actions/changed-files@2d756ea4c53f7f6b397767d8723b3a10a9f35bf2 # v44
      with:
        files_ignore: third_party/**
        files: |
          docker-compose.yml
          docker/linux/**
          .github/actions/docker/**

    - name: Retrieve existing Docker image tags and metadata
      id: meta
      uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96 # v4.3.0
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ inputs.docker_image }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
    - name: Extract Tag
      env:
        EXISTING_TAGS: ${{ steps.meta.outputs.tags }}
      run: |
        set -x
        docker_tag="${EXISTING_TAGS%.1[+,-]}"
        echo ${docker_tag}
        # Extract the first tag and store in env.
        echo "DOCKER_TAG=${docker_tag}" | head -n 1 >> ${GITHUB_ENV}
      shell: bash

    # On a pull request where no Docker files were changed we use the existing base_ref postsubmit image (e.g. `main`).
    - name: Retrieve existing postsubmit Docker image tag and metadata (presubmit)
      if: ${{ (steps.changed-files.outputs.any_changed == 'false') && (github.event_name == 'pull_request') }}
      id: pr-meta
      uses: docker/metadata-action@507c2f2dc502c992ad446e3d7a5dfbe311567a96 # v4.3.0
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ inputs.docker_image }}
        tags: type=raw,value=${{ github.base_ref }}
    - name: Extract Tag
      if: ${{ (steps.changed-files.outputs.any_changed == 'false') && (github.event_name == 'pull_request') }}
      env:
        POSTSUBMIT_TAG: ${{ steps.pr-meta.outputs.tags }}
      run: |
        set -x
        docker_tag="${POSTSUBMIT_TAG%.1[+,-]}"
        echo ${docker_tag}
        echo "DOCKER_TAG=${docker_tag}" >> ${GITHUB_ENV}
      shell: bash

    # If Docker files are changed on a PR from a forked repo we need to use gcr.io as we won't have push access to ghcr.io.
    - name: Set up Cloud SDK
      if: ${{ (steps.changed-files.outputs.any_changed == 'true') && (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.fork) }}
      uses: isarkis/setup-gcloud@40dce7857b354839efac498d3632050f568090b6 # v1.1.1
    - name: Set up GCR authentication and compose Docker tag
      if: ${{ (steps.changed-files.outputs.any_changed == 'true') && (github.event_name == 'pull_request') && (github.event.pull_request.head.repo.fork) }}
      run: |
        # Set up auth for gcr.io and get the project name to push images to.
        METADATA="http://metadata.google.internal./computeMetadata/v1"
        SVC_ACCT="${METADATA}/instance/service-accounts/default"
        ACCESS_TOKEN=$(curl -H 'Metadata-Flavor: Google' ${SVC_ACCT}/token | cut -d'"' -f 4)
        printf ${ACCESS_TOKEN} | docker login -u oauth2accesstoken --password-stdin https://gcr.io

        PROJECT_NAME=$(gcloud config get-value project)

        echo "PROJECT_NAME=${PROJECT_NAME}" >> ${GITHUB_ENV}
        echo "DOCKER_TAG=gcr.io/${PROJECT_NAME}/${{ inputs.docker_image }}:pr-${{ github.event.number }}" >> ${GITHUB_ENV}
      shell: bash

    - name: Inspect ${{ env.DOCKER_TAG }} image
      id: inspect-image
      continue-on-error: true
      run: |
        set -x
        docker manifest inspect ${DOCKER_TAG}
      shell: bash

    - name: Rebuild Docker image
      if: steps.changed-files.outputs.any_changed == 'true' || steps.inspect-image.outcome == 'failure'
      id: build-image
      shell: bash
      env:
        # Disable Docker BuildKit.
        DOCKER_BUILDKIT: 0
      run: |
        set -xue
        # TODO(oxv): Pull existing postsubmit image here first?
        docker compose -f docker-compose.yml up --build --no-start "${{ inputs.docker_service }}"

    - name: Tag and Push image
      run: |
        docker tag ${{ inputs.docker_image }} ${DOCKER_TAG}
        docker push ${DOCKER_TAG}
      shell: bash
